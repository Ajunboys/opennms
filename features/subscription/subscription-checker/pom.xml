<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>subscription</artifactId>
    <groupId>org.opennms.features</groupId>
    <version>21.0.0-SNAPSHOT</version>
  </parent>
  <groupId>org.opennms.features</groupId>
  <artifactId>subscription-checker</artifactId>
  <packaging>bundle</packaging>
  <name>OpenNMS :: Features :: Subscription Checker</name>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- opennms/features/subscription/subscription-checker -->
    <productKeysFile>${project.basedir}/../../../productkeys.properties</productKeysFile>
  </properties>
  <build>
    <plugins>
<!--       <plugin> -->
<!--         <groupId>org.codehaus.mojo</groupId> -->
<!--         <artifactId>properties-maven-plugin</artifactId> -->
<!--         <version>1.0.0</version> -->
<!--         <executions> -->
<!--           <execution> -->
<!--             <phase>initialize</phase> -->
<!--             <goals> -->
<!--               <goal>read-project-properties</goal> -->
<!--             </goals> -->
<!--             <configuration> -->
<!--               <files> -->
<!--                 opennms/features/subscription/subscription-checker -->
<!--                 <file>../../../productkeys.properties</file> -->
<!--               </files> -->
<!--             </configuration> -->
<!--           </execution> -->
<!--         </executions> -->
<!--       </plugin> -->

     
      <!--reading in product keys file to generate subscription -->
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>gmaven-plugin</artifactId>
        <inherited>false</inherited>
        <executions>
            <execution>
                <phase>validate</phase>
                <goals>
                    <goal>execute</goal>
                </goals>
                <configuration>
                    <providerSelection>2.0</providerSelection>
                    <source><![CDATA[
                   log.info("Starting gmaven-plugin Groovy script to import properties");
                   import java.io.FileInputStream;
                   import java.io.File;
                   
                   String PRODUCT_KEYS_FILENAME_PROPERTY = "productKeysFile";

                   java.util.Properties newProperties = new java.util.Properties();

                   String p = project.properties.getProperty(PRODUCT_KEYS_FILENAME_PROPERTY);

                   if (p == null) {
                    log.error("Property not defined in pom: " + PRODUCT_KEYS_FILENAME_PROPERTY);
                   } else {
                    File f = new File(p);
                    if (!f.exists()) {
                      log.warn("Properties File " + f.getAbsolutePath()
                          + " does not exist. Not loading extra properties. Using defaults");

                      String defaultSubscriptionName = project.properties.getProperty("defaultSubscriptionName");
                      if (defaultSubscriptionName != null) {
                          log.info("   adding default maven property: subscriptionName ="+ defaultSubscriptionName);
                          project.properties.setProperty("subscriptionName", defaultSubscriptionName);
                      }
                      
                      String defaultSubscriptionVersion= project.properties.getProperty("defaultSubscriptionVersion");
                      if (defaultSubscriptionVersion != null) {
                          log.info("   adding default maven property: subscriptionVersion ="+ defaultSubscriptionVersion);
                          project.properties.setProperty("subscriptionVersion", defaultSubscriptionVersion);
                      }
                      
                      String defaultSubscriptionGroupId= project.properties.getProperty("defaultSubscriptionGroupId");
                      if (defaultSubscriptionGroupId != null) {
                          log.info("   adding default maven property: subscriptionGroupId ="+ defaultSubscriptionGroupId);
                          project.properties.setProperty("subscriptionGroupId", defaultSubscriptionGroupId);
                      }
                      
                      String defaultSubscriptionCheckEnabled= project.properties.getProperty("defaultSubscriptionCheckEnabled");
                      if (defaultSubscriptionCheckEnabled != null) {
                          log.info("   adding default maven property: subscriptionCheckEnabled ="+ defaultSubscriptionCheckEnabled);
                          project.properties.setProperty("subscriptionCheckEnabled", defaultSubscriptionCheckEnabled);
                      }
                      
                      String defaultRegenerateSubscription= project.properties.getProperty("defaultRegenerateSubscription");
                      if (defaultRegenerateSubscription != null) {
                          log.info("   adding default maven property: regenerateSubscription ="+ defaultRegenerateSubscription);
                          project.properties.setProperty("regenerateSubscription", defaultRegenerateSubscription);
                      }

                     } else {
                      log.info("Loading additional build properties from "+ f.getAbsolutePath());
                      FileInputStream input;
                      try {
                        input = new FileInputStream(p);
                        newProperties.load(input);
                      } catch (Exception e) {
                        log.error("problem loading properties file ",e);
                      }

                      for (String key : newProperties.stringPropertyNames()) {
                        String value = newProperties.getProperty(key);
                        log.info("   adding new maven property: " + key + "="
                            + value + " replacing: "
                            + project.properties.setProperty(key, value));
                      }

                    }
                   }
                   ]]>
                </source>
                </configuration>
            </execution>
        </executions>
      </plugin>


      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>filter-resources</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/filtered-resources</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/filtered-resources</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-resource</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>add-resource</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>${project.build.directory}/filtered-resources</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>


      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <extensions>true</extensions>
        <configuration>
          <instructions>
            <Bundle-RequiredExecutionEnvironment>JavaSE-1.8</Bundle-RequiredExecutionEnvironment>
            <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
            <Bundle-Version>${project.version}</Bundle-Version>
            <Import-Package>org.apache.felix.service.command,org.apache.felix.gogo.commands,org.apache.karaf.shell.console,*</Import-Package>
          </instructions>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.opennms.maven.plugins</groupId>
        <artifactId>features-maven-plugin</artifactId>
        <configuration>
          <features>
            <feature>guava</feature>
            <feature>hibernate36</feature> <!-- Required by opennms-web-api -->
            <feature>quartz</feature> <!-- Required by opennms-web-api -->
          </features>
          <bundles>
            <bundle>mvn:org.opennms.features/subscription-checker/${project.version}</bundle>
            <bundle>wrap:mvn:org.freemarker/freemarker/${freemarkerVersion}</bundle>
          </bundles>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>org.apache.karaf.shell</groupId>
      <artifactId>org.apache.karaf.shell.console</artifactId>
    </dependency>
    <dependency>
      <groupId>org.opennms</groupId>
      <artifactId>opennms-dao-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.opennms.core</groupId>
      <artifactId>org.opennms.core.lib</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.opennms.core</groupId>
      <artifactId>org.opennms.core.web</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-core-asl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.opennms</groupId>
      <artifactId>opennms-web-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.freemarker</groupId>
      <artifactId>freemarker</artifactId>
      <version>${freemarkerVersion}</version>
    </dependency>

    <!-- Test Dependencies -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
