
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <groupId>org.opennms</groupId>
    <artifactId>productkeys.executor</artifactId>
    <version>21.0.0-SNAPSHOT</version>
  </parent>

  <!-- Feature Definition -->
  <modelVersion>4.0.0</modelVersion>
  <artifactId>productkeys.feature</artifactId>
  <name>productkeys.feature</name>
  <description>${project.artifactId} Containing Feature definition for OpenNMS subscription</description>
  <packaging>pom</packaging>

  <properties>
    <!-- opennms/features/subscription/subscription-checker -->
    <productKeysFile>${project.basedir}/../../../../productkeys.properties</productKeysFile>
  </properties>

  <build>

    <plugins>

      <!--reading in product keys file to generate subscription -->
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>gmaven-plugin</artifactId>
        <inherited>false</inherited>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <providerSelection>2.0</providerSelection>
              <source><![CDATA[
                   log.info("Starting gmaven-plugin Groovy script to import properties");
                   import java.io.FileInputStream;
                   import java.io.File;
                   
                   String PRODUCT_KEYS_FILENAME_PROPERTY = "productKeysFile";

                   java.util.Properties newProperties = new java.util.Properties();

                   String p = project.properties.getProperty(PRODUCT_KEYS_FILENAME_PROPERTY);

                   if (p == null) {
                    log.error("Property not defined in pom: " + PRODUCT_KEYS_FILENAME_PROPERTY);
                   } else {
                    File f = new File(p);
                    if (!f.exists()) {
                      log.warn("Properties File " + f.getAbsolutePath()
                          + " does not exist. Not loading extra properties. Using defaults");

                      String defaultSubscriptionName = project.properties.getProperty("defaultSubscriptionName");
                      if (defaultSubscriptionName != null) {
                          log.info("   adding default maven property: subscriptionName ="+ defaultSubscriptionName);
                          project.properties.setProperty("subscriptionName", defaultSubscriptionName);
                      }
                      
                      String defaultSubscriptionVersion= project.properties.getProperty("defaultSubscriptionVersion");
                      if (defaultSubscriptionVersion != null) {
                          log.info("   adding default maven property: subscriptionVersion ="+ defaultSubscriptionVersion);
                          project.properties.setProperty("subscriptionVersion", defaultSubscriptionVersion);
                      }
                      
                      String defaultSubscriptionGroupId= project.properties.getProperty("defaultSubscriptionGroupId");
                      if (defaultSubscriptionGroupId != null) {
                          log.info("   adding default maven property: subscriptionGroupId ="+ defaultSubscriptionGroupId);
                          project.properties.setProperty("subscriptionGroupId", defaultSubscriptionGroupId);
                      }
                      
                      String defaultSubscriptionCheckEnabled= project.properties.getProperty("defaultSubscriptionCheckEnabled");
                      if (defaultSubscriptionCheckEnabled != null) {
                          log.info("   adding default maven property: subscriptionCheckEnabled ="+ defaultSubscriptionCheckEnabled);
                          project.properties.setProperty("subscriptionCheckEnabled", defaultSubscriptionCheckEnabled);
                      }
                      
                      String defaultRegenerateSubscription= project.properties.getProperty("defaultRegenerateSubscription");
                      if (defaultRegenerateSubscription != null) {
                          log.info("   adding default maven property: regenerateSubscription ="+ defaultRegenerateSubscription);
                          project.properties.setProperty("regenerateSubscription", defaultRegenerateSubscription);
                      }

                     } else {
                      log.info("Loading additional build properties from "+ f.getAbsolutePath());
                      FileInputStream input;
                      try {
                        input = new FileInputStream(p);
                        newProperties.load(input);
                      } catch (Exception e) {
                        log.error("problem loading properties file ",e);
                      }

                      for (String key : newProperties.stringPropertyNames()) {
                        String value = newProperties.getProperty(key);
                        log.info("   adding new maven property: " + key + "="
                            + value + " replacing: "
                            + project.properties.setProperty(key, value));
                      }

                    }
                    
                    List<String> goals = session.getGoals();

                    String goalStr="";
                    if(goals.contains("install")) goalStr="install";
                    if(goals.contains("deploy")) goalStr="deploy";

                    log.info("   adding new maven property: goalStr="
                            + goalStr + " replacing: "
                            + project.properties.setProperty("goalStr", goalStr));
                    
                    String userPropertiesStr="";
                    for (String key : session.getUserProperties().stringPropertyNames()) {
                      userVariablesStr=userPropertiesStr+" -D"+key+"="+session.getUserProperties().getProperty(key);
                    }
                    log.info("   adding new maven property: userPropertiesStr="
                            + userPropertiesStr + " replacing: "
                            + project.properties.setProperty("userPropertiesStr", userPropertiesStr));
                    
                    String systemPropertiesStr="";
                    for (String key : session.getSystemProperties().stringPropertyNames()) {
                      userVariablesStr=systemPropertiesStr+" -D"+key+"="+session.getUserProperties().getProperty(key);
                    }
                    log.info("   adding new maven property: systemPropertiesStr="
                            + systemPropertiesStr + " replacing: "
                            + project.properties.setProperty("systemPropertiesStr", systemPropertiesStr));
                    
                   }
                   ]]>
              </source>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.opennms.maven.plugins</groupId>
        <artifactId>features-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>features.xml</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate-features-xml</goal>
            </goals>
            <configuration>
              <!-- so that licence manager feature starts before this module -->
              <repositories>
                <repository>mvn:org.opennms.plugins/org.opennms.plugin.licencemanager/${licencemanagerVersion}/xml/features</repository>
              </repositories>
              <features>
                <feature>org.opennms.plugin.licencemanager</feature>
              </features>
              <bundles>
                <bundle>mvn:${subscriptionGroupId}/${subscriptionName}.licence-authenticator/${subscriptionVersion}</bundle>
                <bundle>mvn:${subscriptionGroupId}/${subscriptionName}.product-descriptor/${subscriptionVersion}</bundle>
              </bundles>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>

  </build>

  <dependencies>
    <!-- <dependency> -->
    <!-- <groupId>${subscriptionGroupId}</groupId> -->
    <!-- <artifactId>${subscriptionName}.licence-authenticator</artifactId> -->
    <!-- <version>${subscriptionVersion}</version> -->
    <!-- </dependency> -->
    <!-- <dependency> -->
    <!-- <groupId>${subscriptionGroupId}</groupId> -->
    <!-- <artifactId>${subscriptionName}.product-descriptor</artifactId> -->
    <!-- <version>${subscriptionVersion}</version> -->
    <!-- </dependency> -->
  </dependencies>
  <pluginRepositories>
    <pluginRepository>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
      </releases>
      <id>opennms-repo</id>
      <name>OpenNMS Repository</name>
      <url>http://maven.opennms.org/content/groups/opennms.org-release</url>
    </pluginRepository>
  </pluginRepositories>

</project>