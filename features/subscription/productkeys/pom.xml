<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <artifactId>subscription</artifactId>
    <groupId>org.opennms.features</groupId>
    <version>21.0.0-SNAPSHOT</version>
  </parent>

  <groupId>org.opennms</groupId>
  <artifactId>productkeys.executor</artifactId>
  <packaging>pom</packaging>
  <name>OpenNMS :: Feature :: ProductKeys :: Executor</name>

  <modelVersion>4.0.0</modelVersion>

  <properties>
        <!-- opennms/features/subscription/subscription-checker -->
    <productKeysFile>${project.basedir}/../../../productkeys.properties</productKeysFile>
  </properties>

  <build>
    <plugins>

      <!--reading in product keys file to generate subscription -->
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>gmaven-plugin</artifactId>
        <inherited>false</inherited>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <providerSelection>2.0</providerSelection>
              <source><![CDATA[
                   log.info("Starting gmaven-plugin Groovy script to import properties");
                   import java.io.FileInputStream;
                   import java.io.File;
                   
                   String PRODUCT_KEYS_FILENAME_PROPERTY = "productKeysFile";

                   java.util.Properties newProperties = new java.util.Properties();

                   String p = project.properties.getProperty(PRODUCT_KEYS_FILENAME_PROPERTY);

                   if (p == null) {
                    log.error("Property not defined in pom: " + PRODUCT_KEYS_FILENAME_PROPERTY);
                   } else {
                    File f = new File(p);
                    if (!f.exists()) {
                      log.warn("Properties File " + f.getAbsolutePath()
                          + " does not exist. Not loading extra properties. Using defaults");

                      String defaultSubscriptionName = project.properties.getProperty("defaultSubscriptionName");
                      if (defaultSubscriptionName != null) {
                          log.info("   adding default maven property: subscriptionName ="+ defaultSubscriptionName);
                          project.properties.setProperty("subscriptionName", defaultSubscriptionName);
                      }
                      
                      String defaultSubscriptionVersion= project.properties.getProperty("defaultSubscriptionVersion");
                      if (defaultSubscriptionVersion != null) {
                          log.info("   adding default maven property: subscriptionVersion ="+ defaultSubscriptionVersion);
                          project.properties.setProperty("subscriptionVersion", defaultSubscriptionVersion);
                      }
                      
                      String defaultSubscriptionGroupId= project.properties.getProperty("defaultSubscriptionGroupId");
                      if (defaultSubscriptionGroupId != null) {
                          log.info("   adding default maven property: subscriptionGroupId ="+ defaultSubscriptionGroupId);
                          project.properties.setProperty("subscriptionGroupId", defaultSubscriptionGroupId);
                      }
                      
                      String defaultSubscriptionCheckEnabled= project.properties.getProperty("defaultSubscriptionCheckEnabled");
                      if (defaultSubscriptionCheckEnabled != null) {
                          log.info("   adding default maven property: subscriptionCheckEnabled ="+ defaultSubscriptionCheckEnabled);
                          project.properties.setProperty("subscriptionCheckEnabled", defaultSubscriptionCheckEnabled);
                      }
                      
                      String defaultRegenerateSubscription= project.properties.getProperty("defaultRegenerateSubscription");
                      if (defaultRegenerateSubscription != null) {
                          log.info("   adding default maven property: regenerateSubscription ="+ defaultRegenerateSubscription);
                          project.properties.setProperty("regenerateSubscription", defaultRegenerateSubscription);
                      }

                     } else {
                      log.info("Loading additional build properties from "+ f.getAbsolutePath());
                      FileInputStream input;
                      try {
                        input = new FileInputStream(p);
                        newProperties.load(input);
                      } catch (Exception e) {
                        log.error("problem loading properties file ",e);
                      }

                      for (String key : newProperties.stringPropertyNames()) {
                        String value = newProperties.getProperty(key);
                        log.info("   adding new maven property: " + key + "="
                            + value + " replacing: "
                            + project.properties.setProperty(key, value));
                      }

                    }
                    
                    List<String> goals = session.getGoals();

                    String goalStr="";
                    if(goals.contains("install")) goalStr="install";
                    if(goals.contains("deploy")) goalStr="deploy";

                    log.info("   adding new maven property: goalStr="
                            + goalStr + " replacing: "
                            + project.properties.setProperty("goalStr", goalStr));
                    
                    String userPropertiesStr="";
                    for (String key : session.getUserProperties().stringPropertyNames()) {
                      userVariablesStr=userPropertiesStr+" -D"+key+"="+session.getUserProperties().getProperty(key);
                    }
                    log.info("   adding new maven property: userPropertiesStr="
                            + userPropertiesStr + " replacing: "
                            + project.properties.setProperty("userPropertiesStr", userPropertiesStr));
                    
                    String systemPropertiesStr="";
                    for (String key : session.getSystemProperties().stringPropertyNames()) {
                      userVariablesStr=systemPropertiesStr+" -D"+key+"="+session.getUserProperties().getProperty(key);
                    }
                    log.info("   adding new maven property: systemPropertiesStr="
                            + systemPropertiesStr + " replacing: "
                            + project.properties.setProperty("systemPropertiesStr", systemPropertiesStr));
                    
                   }
                   ]]>
              </source>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- <plugin> -->
      <!-- <groupId>org.codehaus.mojo</groupId> -->
      <!-- <artifactId>properties-maven-plugin</artifactId> -->
      <!-- <version>1.0.0</version> -->
      <!-- <executions> -->
      <!-- <execution> -->
      <!-- <phase>initialize</phase> -->
      <!-- <goals> -->
      <!-- <goal>read-project-properties</goal> -->
      <!-- </goals> -->
      <!-- <configuration> -->
      <!-- <files> -->
      <!-- <file>../productkeys.properties</file> -->
      <!-- </files> -->
      <!-- </configuration> -->
      <!-- </execution> -->
      <!-- </executions> -->
      <!-- </plugin> -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <executable>mvn</executable>
          <arguments>
            <!-- <argument>-X</argument> -->
            <argument>-f</argument>
            <argument>${project.basedir}/pom-exec.xml</argument>
            <argument>clean</argument>
            <argument>${goalStr}</argument> <!-- install, deploy or empty -->
            <argument>-DproductName=${subscriptionName}</argument>
            <argument>-DproductVersion=${subscriptionVersion}</argument>
            <argument>-DproductGroupId=${subscriptionGroupId}</argument>
            
            <argument>-DregenerateSubscription=${regenerateSubscription}</argument>

            <argument>-Dopennms-repo-ref=scpexe://repo.opennms.org/var/www/sites/opennms.org/site/repo/maven2</argument>
            <argument>-Dopennms-snapshots-ref=scpexe://repo.opennms.org/var/www/sites/opennms.org/site/repo/snapshots</argument>
            <argument>-DlicenceSpecRepo=${licenceSpecRepo}</argument>
            <argument>-DlicenceSpecSnapshotRepo=${licenceSpecSnapshotRepo}</argument>
          </arguments>
        </configuration>

      </plugin>
    </plugins>
  </build>

</project>